{
    "contents" : "query.rand  <- \"select mem_id, description, amount, transaction_category as category, optimized_transaction_date as date from yi_base_views.bank_panel where\nmem_id in (select distinct mem_id from yi_base_views.bank_panel order by random() limit 10) and transaction_date > '2014-09-01' order by 1\"\n\nquery.fix  <- \"select mem_id, transaction_id, description, amount, transaction_category as category, optimized_transaction_date as date from yi_base_views.bank_panel where\nmem_id in (1000164415352201, 1000564012973460, 1000564013171293, 1000564013502219, 1000564014242573, 1000616412894541, 1000564012609530, 1000564013137781, 1000564014123899, 1000564014583825, 1000616410283476) and transaction_date > '2014-09-01' order by 1\"\n\nquery <- \"select description, amount, transaction_category as category, optimized_transaction_date as date from yi_base_views.bank_panel where mem_id=1000616410222094 and transaction_date > '2014-08-01'\"\n\nDATE_FORMAT <- \"%d/%m/%Y\"\n\nfind_similar  <- function(X){\n  X$flag  <- rep(0, nrow(X))\n  data.sim <- data.frame()\n  for(i in 1:nrow(X)) {\n    if(X[i, 'flag'] == 1) next\n    cond_match <- sim(X$description[i], X$description) < 2\n    X[cond_match, 'flag'] <- 1\n    if(nrow(X[cond_match, ]) >= 2) {\n      temp <- do.call(\"rbind\", lapply(split(X[cond_match, ], X[cond_match, ]$category), feature_vector))\n      if(nrow(data.sim) == 0)\n        #data.sim <- feature_vector(X[cond_match, ])\n      #print(split(X[cond_match, ], X[cond_match, ]$category))\n        data.sim <- temp\n      else \n        data.sim <- rbind(data.sim, temp)        \n    }\n  }\n  return (data.sim)\n}\n\nstrprocess <- function(x) {\n  x <- gsub(\"[^[:alpha:]]\", \"\", x)\n  x <- gsub(\"X\", \"\", x)\n  return (tolower(x))\n}\n\nsim <- function(x, y){\n  x <- strprocess(x)\n  y <- strprocess(y)\n  return (adist(x, y))\n}\n\ndate_diff <- function(x, y){\n  return (difftime(strptime(x, format=\"%d/%m/%Y\"), strptime(y, format=\"%d/%m/%Y\"), units=\"weeks\"))\n#  return (difftime(strptime(x, format=\"%d-%m-%Y\"), strptime(y, format=\"%d-%m-%Y\"), units=\"weeks\"))\n}\n\nMode<-function(x){ux<-unique(x); ux[which.max(tabulate(match(x,ux)))]};\n\nload_data <- function(file) {\n  x <- read.table(file, numerals=\"no.loss\", sep=\"|\", quote=\"\", comment.char=\"\", header = T, stringsAsFactors=F)\n  x$mem_id <- rep(1, nrow(x))\n  x$transaction_id <- seq.int(1, nrow(x))\n  return(x)\n}\n\nfilter_similar <- function(x) {\n  sim <- do.call(\"rbind\", lapply(split(x, x$mem_id), find_similar))\n  sim[is.na(sim)] <- -1\n  sim[, 'date_diff'] <- gsub(\" weeks\", \"\", sim[, 'date_diff'])\n  return(sim)\n}\n\nbuild_model <- function() {\n  cats  <<- read.csv('categories.txt', header=T)\n  cats.disc <<- cats[cats$discretionary==1, 'category']\n  patterns <<- read.csv('subscription.txt', header=F)\n  \n  data  <- read.csv('app_train1.csv', header=T)\n  data[is.na(data)]   <- -1\n  m <- PART(label ~ date_diff+date_var+amt+cat+discret+sub, data=data)\n}\n\nfeature_vector <- function(x) {\n  order.date      <- order(as.Date(x$date, format=DATE_FORMAT))\n  x               <- x[order.date, ]\n  diff.date       <- date_diff(tail(x$date, -1), head(x$date, -1))\n  diff.date.avg   <- round(mean(diff.date), digits = 2)\n  diff.date.var   <- round(var(diff.date), digits = 2)\n  #x$norm_amount <- (x$amount - min(x$amount)) / (max(x$amount) - min(x$amount))\n  #amt.sd        <- round(sd(x$norm_amount, na.rm=T), digits = 2)\n  amt.var_to_mean <- round(var(x$amount) / mean(x$amount), digits = 2)\n  trans.cat       <- Mode(x$category)\n  trans.cat.d     <- trans.cat %in% cats.disc\n  trans.desc      <- strprocess(x$description[1])\n  trans.sub       <- Reduce('|', lapply(patterns$V1, grepl, trans.desc))\n  data.features      <- data.frame(mem=unique(x$mem_id), transaction_id=x$transaction_id[1], similar_transactions=paste(x$transaction_id[-1], collapse=\"|\"), desc=trans.desc, date_diff=diff.date.avg, date_var=diff.date.var, amt=amt.var_to_mean, cat=trans.cat, discret=trans.cat.d, sub=trans.sub)\n  return(data.features)\n}\n\nprocess_write <- function(x, file){\n # data.train <- feature_vector(x)\n  write.table(x, file=file, append=T, row.names=F, col.names=F,  sep=\",\")\n}\n\ntrans_predict <- function(m, x) {\n  x$pred <- predict(m, x)\n  x$pred[which(x$discret=='TRUE' | x$cat=='Credit Card Payments')] <- 'Invalid'\n  x$pred[which(x$cat=='Paychecks/Salary' | x$cat=='Other Income' | x$sub=='TRUE')] <- 'Valid'\n  return (x)\n}\n\nbuild_result <- function(raw, processed) {\n  result <- processed[processed$pred=='Valid', c(F, T, T, F, F, F, F, T, F, T, F)]\n  result <- merge(result, raw[, c('transaction_id', 'description', 'amount')], by='transaction_id')\n  #result <- cbind(result, raw[result$transaction_id==raw$transaction_id, c('amount', 'description')])\n  colnames(result) <- c('Transation ID', 'Similar Transactions', 'Category', 'Subscription', 'Description', 'Amount')\n  rownames(result) <- NULL\n  return(result)\n}",
    "created" : 1423596212388.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1948298679",
    "id" : "325E1D5F",
    "lastKnownWriteTime" : 1435687051,
    "path" : "C:/Users/akulkarni/RWorkspace/DataDrivenApp/app_util.R",
    "project_path" : "app_util.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}