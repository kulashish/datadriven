data.test[data.test$pred=='Valid', ]
data.raw[is.na(data.raw[,4]),]
source('app_util.R')
library(rpart)
library(RWeka)
cats  <<- read.csv('categories.txt', header=T)
cats.disc <<- cats[cats$discretionary==1, 'category']
patterns <<- read.csv('subscription.txt', header=F)
data  <- read.csv('app_train1.csv', header=T)
data[is.na(data)]   <- 0
m <- PART(label ~ date_diff+date_var+amt+cat+discret+sub, data=data)
data.raw <- read.csv('C:/Users/akulkarni/Documents/Yodlee/Data driven app/ravindra/BofA_checking.csv', numerals="no.loss", header = T, stringsAsFactors=F)
data.raw[, 1]  <- as.character(data.raw[, 1])
data.raw[, 2]  <- as.character(data.raw[, 2])
data.raw[, 4]  <- as.numeric(data.raw[, 4])
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
x <- data.raw
x$flag <- rep(0, nrow(x))
c <- sim(x$description[1], x$description)
c
c <- sim(x$description[1], x$description) < 2
c
x[c, 'flag'] <- 1
x$flag
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
l <- lapply(split(data.raw, data.raw$mem_id), find_similar)
s<- split(data.raw, data.raw$mem_id)
s
class(s)
typeof(s)
length(s)
nrow(s)
s[1]
length(s[1])
nrow(s[1])
sum(s[1])
find_similar(s[1])
s[1]
s<- as.list(split(data.raw, data.raw$mem_id))
s
s[1]
find_similar(s[1])
?split
sapply(split(data.raw, data.raw$mem_id), find_similar)
class(s[1])
find_similar(data.raw)
?read.table
data.raw <- read.table('C:/Users/akulkarni/Documents/Yodlee/Data driven app/ravindra/BofA_checking.csv', numerals="no.loss", header = T, stringsAsFactors=F, sep="|", quote="")
data.raw <- read.table('C:/Users/akulkarni/Documents/Yodlee/Data driven app/ravindra/BofA_checking.csv', numerals="no.loss", sep="|", quote="", comment.char="", header = T, stringsAsFactors=F)
find_similar(data.raw)
data.raw <- read.table('C:/Users/akulkarni/Documents/Yodlee/Data driven app/ravindra/BofA_checking.csv', numerals="no.loss", sep="|", quote="", comment.char="", header = T, stringsAsFactors=F)
find_similar(data.raw)
source('app_util.R')
data.raw <- read.table('C:/Users/akulkarni/Documents/Yodlee/Data driven app/ravindra/BofA_checking.csv', numerals="no.loss", sep="|", quote="", comment.char="", header = T, stringsAsFactors=F)
find_similar(data.raw)
source('app_util.R')
find_similar(data.raw)
source('app_util.R')
find_similar(data.raw)
x<-data.raw
x$flag <- rep(0, nrow(x))
d<-data.frame()
c <- sim(x$description[1], x$decription) < 2
c
c <- sim(x$description[1], x$description) < 2
c
x[c, 'flag'] <- 1
x
nrow(x[c, ])
nrow(d)
feature_vector(x[c, ])
patterns
feature_vector(x[c, ])
source('app_util.R')
feature_vector(x[c, ])
data.raw <- read.table('C:/Users/akulkarni/Documents/Yodlee/Data driven app/ravindra/BofA_checking.csv', numerals="no.loss", sep="|", quote="", comment.char="", header = T, stringsAsFactors=F)
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
data.test <- trans_predict(m, data.sim.df)
data.test[, 3] <- as.character(data.test[, 3])
data.test[data.test$pred=='Valid', ]
write.csv(data.test, file='BofA_checking_out.csv')
nrow(data.sim.df)
temp.list <- c(1,2,3,4)
reduce(',', temp.list)
Reduce(',', temp.list)
temp.list
paste(temp.list, collapse=",")
temp.list[-1]
source('app_util.R')
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
data.test <- trans_predict(m, data.sim.df)
data.test[, 3] <- as.character(data.test[, 3])
write.csv(data.test, file='BofA_checking_out.csv')
write.csv(data.test, file='BofA_checking_out.csv')
write.csv(data.test, file='BofA_checking_out.csv')
source('app_util.R')
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
data.test <- trans_predict(m, data.sim.df)
data.test[, 3] <- as.character(data.test[, 3])
write.csv(data.test, file='BofA_checking_out.csv')
head(date.test)
c
write.csv(data.test[, c(2, 3, 8:11)], file='BofA_checking_out.csv')
source('app_util.R')
source('app_util.R')
write.csv(data.test[, c(2, 3, 8:11)], file='BofA_checking_out.csv')
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
data.test <- trans_predict(m, data.sim.df)
source('app_util.R')
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
data.test <- trans_predict(m, data.sim.df)
source('app_util.R')
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
data.test <- trans_predict(m, data.sim.df)
source('app_util.R')
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
data.test <- trans_predict(m, data.sim.df)
data.test[, 3] <- as.character(data.test[, 3])
write.csv(data.test[, c(2, 3, 8:11)], file='BofA_checking_out.csv')
data.raw <- read.table('C:/Users/akulkarni/Documents/Yodlee/Data driven app/ravindra/BofA_checking.csv', numerals="no.loss", sep="|", quote="", comment.char="", header = T, stringsAsFactors=F)
data.raw <- read.table('C:/Users/akulkarni/Documents/Yodlee/Data driven app/ravindra/BofA_checking_in.txt', numerals="no.loss", sep="|", quote="", comment.char="", header = T, stringsAsFactors=F)
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
data.test <- trans_predict(m, data.sim.df)
data.test[, 3] <- as.character(data.test[, 3])
data.test[data.test$pred=='Valid', ]
View(data.test)
which(data.test$cat=='Paychecks/Salary')
which(data.test$cat=='Credit Card Payments')
which(x$cat=='Paychecks/Salary' | x$cat=='Other Income' | x$subscription=='TRUE')
x$cat=='Paychecks/Salary' | x$cat=='Other Income' | x$subscription=='TRUE'
x$cat=='Paychecks/Salary'
x$subscription=='TRUE'
x$subscription==TRUE
x$sub==TRUE
x$sub=='TRUE'
data.test$sub==TRUE
data.test$sub=='TRUE'
source('app_util.R')
data.raw <- read.table('C:/Users/akulkarni/Documents/Yodlee/Data driven app/ravindra/BofA_checking_in.txt', numerals="no.loss", sep="|", quote="", comment.char="", header = T, stringsAsFactors=F)
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
data.test <- trans_predict(m, data.sim.df)
data.test[, 3] <- as.character(data.test[, 3])
data.test[data.test$pred=='Valid', ]
source('app_util.R')
library(rpart)
library(RWeka)
cats  <<- read.csv('categories.txt', header=T)
cats.disc <<- cats[cats$discretionary==1, 'category']
patterns <<- read.csv('subscription.txt', header=F)
data  <- read.csv('app_train1.csv', header=T)
data[is.na(data)]   <- 0
m <- PART(label ~ date_diff+date_var+amt+cat+discret+sub, data=data)
data.raw <- read.table('C:/Users/akulkarni/Documents/Yodlee/Data driven app/DW/Export Data Checking - DW.csv', numerals="no.loss", sep="|", quote="", comment.char="", header = T, stringsAsFactors=F)
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
?seq
seq.int(1,10)
data.raw$mem_id <- rep(1, nrow(data.raw))
data.raw$transaction_id <- seq_in(1, nrow(data.raw))
data.raw$transaction_id <- seq_int(1, nrow(data.raw))
data.raw$transaction_id <- seq.int(1, nrow(data.raw))
View(data.raw)
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
data.test <- trans_predict(m, data.sim.df)
View(data.sim.df)
View(data.raw)
data.raw <- read.table('C:/Users/akulkarni/Documents/Yodlee/Data driven app/DW/Export Data Checking - DW.csv', numerals="no.loss", sep="|", quote="", comment.char="", header = T, stringsAsFactors=F)
data.raw$mem_id <- rep(1, nrow(data.raw))
data.raw$transaction_id <- seq.int(1, nrow(data.raw))
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
View(data.sim.df)
View(data.raw)
data.raw <- read.table('C:/Users/akulkarni/Documents/Yodlee/Data driven app/DW/Export Data Checking - DW.csv', numerals="no.loss", sep="|", quote="", comment.char="", header = T, stringsAsFactors=F)
data.raw$mem_id <- rep(1, nrow(data.raw))
data.raw$transaction_id <- seq.int(1, nrow(data.raw))
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
View(data.sim.df)
data.test <- trans_predict(m, data.sim.df)
View(data.test)
data.raw <- read.table('C:/Users/akulkarni/Documents/Yodlee/Data driven app/DW/Export Data Checking - DW.csv', numerals="no.loss", sep="|", quote="", comment.char="", header = T, stringsAsFactors=F)
data.raw$mem_id <- rep(1, nrow(data.raw))
data.raw$transaction_id <- seq.int(1, nrow(data.raw))
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
data.test <- trans_predict(m, data.sim.df)
View(data.test)
source('app_util.R')
data.raw <- read.table('C:/Users/akulkarni/Documents/Yodlee/Data driven app/DW/Export Data Checking - DW.csv', numerals="no.loss", sep="|", quote="", comment.char="", header = T, stringsAsFactors=F)
data.raw$mem_id <- rep(1, nrow(data.raw))
data.raw$transaction_id <- seq.int(1, nrow(data.raw))
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
source('app_util.R')
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
source('app_util.R')
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
source('app_util.R')
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
source('app_util.R')
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
source('app_util.R')
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
data.test <- trans_predict(m, data.sim.df)
View(data.test)
View(data.sim.df)
source('app_util.R')
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
data.test <- trans_predict(m, data.sim.df)
View(data.test)
m
install.packages("printr")
library(pander)
?install.packages('pander')
library(pander)
install.packages('pander')
library(xtable)
system("dw.rmd 'C:/Users/akulkarni/Documents/Yodlee/Data driven app/DW/Export Data Checking - DW.csv'")
data.result <- data.test[data.test$pred=='Valid', c(F, T, T, F, F, F, F, T, F, T, F)]
View(data.result)
data.result$Amount <- data.raw[data.result$transaction_id==data.raw$transaction_id, 'amount']
View(data.result)
data.result$Amount <- data.raw[data.result$transaction_id==data.raw$transaction_id, c('amount', 'description')]
data.result$Amount <- data.raw[data.result$transaction_id==data.raw$transaction_id, c('amount', 'description')]
View(data.result)
data.result <- cbind(data.result, data.raw[data.result$transaction_id==data.raw$transaction_id, c('amount', 'description')])
View(data.result)
data.result <- data.test[data.test$pred=='Valid', c(F, T, T, F, F, F, F, T, F, T, F)]
data.result <- cbind(data.result, data.raw[data.result$transaction_id==data.raw$transaction_id, c('amount', 'description')])
View(data.result)
colnames(data.result) <- c('Transation ID', 'Similar Transactions', 'Category', 'Subscription', 'Amount', 'Description')
View(data.result)
rownames(data.result) <- NULL
View(data.result)
data.raw <- read.table('C:/Users/akulkarni/Documents/Yodlee/Data driven app/DW/Export Data Card- DW.csv', numerals="no.loss", sep="|", quote="", comment.char="", header = T, stringsAsFactors=F)
data.raw$mem_id <- rep(1, nrow(data.raw))
data.raw$transaction_id <- seq.int(1, nrow(data.raw))
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
data.test <- trans_predict(m, data.sim.df)
source('app_util.R')
data.raw <- read.table('C:/Users/akulkarni/Documents/Yodlee/Data driven app/DW/Export Data Card- DW.csv', numerals="no.loss", sep="|", quote="", comment.char="", header = T, stringsAsFactors=F)
data.raw$mem_id <- rep(1, nrow(data.raw))
data.raw$transaction_id <- seq.int(1, nrow(data.raw))
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
data.sim.df[is.na(data.sim.df)] <- 0
data.sim.df[, 'date_diff'] <- gsub(" weeks", "", data.sim.df[, 'date_diff'])
data.test <- trans_predict(m, data.sim.df)
data.result <- data.test[data.test$pred=='Valid', c(F, T, T, F, F, F, F, T, F, T, F)]
data.result
data.raw[data.result$transaction_id==data.raw$transaction_id, c('amount', 'description')]
merge(data.test, data.raw, by='transaction_id')
merge(data.result, data.raw, by='transaction_id')
?merge
View(data.raw)
data.raw <- read.table('C:/Users/akulkarni/Documents/Yodlee/Data driven app/EJ/Export Data Checking 1 - EJ.csv', numerals="no.loss", sep="|", quote="", comment.char="", header = T, stringsAsFactors=F)
data.raw$mem_id <- rep(1, nrow(data.raw))
data.raw$transaction_id <- seq.int(1, nrow(data.raw))
data.sim.df <- do.call("rbind", lapply(split(data.raw, data.raw$mem_id), find_similar))
View(data.raw)
m
r
print(m)
data  <- read.csv('app_train1.csv', header=T)
data[is.na(data)]   <- 0
m <- PART(label ~ date_diff+date_var+amt+cat+discret+sub, data=data)
source('app_util.R')
library(rpart)
library(RWeka)
cats  <<- read.csv('categories.txt', header=T)
cats.disc <<- cats[cats$discretionary==1, 'category']
patterns <<- read.csv('subscription.txt', header=F)
data  <- read.csv('app_train1.csv', header=T)
data[is.na(data)]   <- 0
m <- PART(label ~ date_diff+date_var+amt+cat+discret+sub, data=data)
m
data  <- read.csv('app_train1.csv', header=T)
data[is.na(data)]   <- -1
m <- PART(label ~ date_diff+date_var+amt+cat+discret+sub, data=data)
m
r
m
source('app_util.R')
library(rpart)
library(RWeka)
source('app_util.R')
library(rpart)
library(RWeka)
source('app_util.R')
library(rpart)
library(RWeka)
install.package('RWeka')
library("RWeka", lib.loc="C:/Program Files/R/R-3.1.1/library")
install.packages("RWeka")
source('app_util.R')
library(rpart)
library(RWeka)
source('app_util.R')
library(rpart)
library(RWeka)
install.packages("rJava")
install.packages("rJava")
source('app_util.R')
library(rpart)
library(RWeka)
library(RWeka)
library(RWeka)
library(RWeka)
source('app_util.R')
library(rpart)
cats  <<- read.csv('categories.txt', header=T)
cats.disc <<- cats[cats$discretionary==1, 'category']
patterns <<- read.csv('subscription.txt', header=F)
data  <- read.csv('app_train1.csv', header=T)
data[is.na(data)]   <- -1
m <- PART(label ~ date_diff+date_var+amt+cat+discret+sub, data=data)
m
data.raw <- load_data('C:/Users/akulkarni/Documents/Yodlee/Data driven app/DG/Export Data - DG.csv')
data.sim.df <- filter_similar(data.raw)
data.test   <- trans_predict(m, data.sim.df)
row.names(data.test) <- NULL
data.result <- build_result(data.raw, data.test)
View(data.test)
m <- build_model()
data.raw <- load_data('C:/Users/akulkarni/Documents/Yodlee/Data driven app/DG/Export Data - DG.csv')
data.sim.df <- filter_similar(data.raw)
data.test   <- trans_predict(m, data.sim.df)
View(data.sim.df)
trans_predict(m, data.sim.df[8, ])
predict(m, data.sim.df[8, ])
m
print(m)
source('app_util.R')
library(rpart)
library(RWeka)
cats  <<- read.csv('categories.txt', header=T)
cats.disc <<- cats[cats$discretionary==1, 'category']
patterns <<- read.csv('subscription.txt', header=F)
trans <- read.table('C:\\Users\\akulkarni\\Documents\\Yodlee\\Data driven app\\53k_raw_trans\\53k_raw_trans.csv',header=T,sep="^",qoute="",stringsAsFactors=F)
trans <- read.csv('C:\\Users\\akulkarni\\Documents\\Yodlee\\Data driven app\\53k_raw_trans\\53k_raw_trans.csv',header=T,sep="^",qoute="",stringsAsFactors=F)
trans <- read.csv('C:\\Users\\akulkarni\\Documents\\Yodlee\\Data driven app\\53k_raw_trans\\53k_raw_trans.csv',header=T,sep="^",quote="",stringsAsFactors=F)
head(trans)
trans[, 1]  <- as.character(trans[, 1])
trans[, 2]  <- as.character(trans[, 2])
head(trans)
data.sim_df <- do.call("rbind", lapply(split(trans, trans$mem_id), find_similar))
trans <- read.csv('C:\\Users\\akulkarni\\Documents\\Yodlee\\Data driven app\\53k_raw_trans\\sample_raw.csv',header=T,sep="^",quote="",stringsAsFactors=F)
trans[, 1]  <- as.character(trans[, 1])
trans[, 2]  <- as.character(trans[, 2])
source('app_util.R')
data.sim_df <- do.call("rbind", lapply(split(trans, trans$mem_id), find_similar))
View(data.sim_df)
?order
order(5,3,2)
order(c(5,3,2))
order(c('25/03/2015','25/03/2015','26/01/2015','26/01/2015','26/01/2015'))
order(c('25/03/2015','26/01/2015','25/03/2015','26/01/2015','26/01/2015'))
trans <- read.csv('C:\\Users\\akulkarni\\Documents\\Yodlee\\Data driven app\\53k_raw_trans\\sample_raw.csv',header=T,sep="^",quote="",stringsAsFactors=F)
trans
order(as.Date(c('25/03/2015','26/01/2015','25/03/2015','26/01/2015','26/01/2015'), format="%d/%m/%Y"))
trans[, 1]  <- as.character(trans[, 1])
trans[, 2]  <- as.character(trans[, 2])
data.sim_df <- do.call("rbind", lapply(split(trans, trans$mem_id), find_similar))
data.sim_df
source('app_util.R')
data.sim_df <- do.call("rbind", lapply(split(trans, trans$mem_id), find_similar))
trans
trans[, 1]  <- as.character(trans[, 1])
trans[, 2]  <- as.character(trans[, 2])
source('app_util.R')
data.sim_df <- do.call("rbind", lapply(split(trans, trans$mem_id), find_similar))
data.sim_df
trans <- read.csv('C:\\Users\\akulkarni\\Documents\\Yodlee\\Data driven app\\53k_raw_trans\\sample_raw.csv',header=T,sep="^",quote="",stringsAsFactors=F)
trans[, 1]  <- as.character(trans[, 1])
trans[, 2]  <- as.character(trans[, 2])
data.sim_df <- do.call("rbind", lapply(split(trans, trans$mem_id), find_similar))
View(data.sim_df)
data  <- read.csv('app_train1.csv', header=T)
data[is.na(data)]   <- 0
m <- PART(label ~ date_diff+date_var+amt+cat+discret+sub, data=data)
library(rpart)
library(RWeka)
m <- PART(label ~ date_diff+date_var+amt+cat+discret+sub, data=data)
print(m)
source('app_util.R')
pred <- predict(m, data)
TP <- data[(data$label==1) & (pred==1), ]
TN <- data[(data$label==0) & (pred==0), ]
FP <- data[(data$label==0) & (pred==1), ]
FN <- data[(data$label==1) & (pred==0), ]
Recall <- nrow(TP) / (nrow(TP)+nrow(FN))
Precision <- nrow(TP) / (nrow(TP)+nrow(FP))
F1 <- 2 * Recall * Precision / (Recall + Precision)
Recall
nrow(TP)
head(TP)
pred
data$label
TP <- data[(data$label=='Valid') & (pred=='Valid'), ]
TN <- data[(data$label=='Invalid') & (pred=='Invalid'), ]
FP <- data[(data$label=='Invalid') & (pred=='Valid'), ]
FN <- data[(data$label=='Valid') & (pred=='Invalid'), ]
Recall <- nrow(TP) / (nrow(TP)+nrow(FN))
Precision <- nrow(TP) / (nrow(TP)+nrow(FP))
F1 <- 2 * Recall * Precision / (Recall + Precision)
Recall
Precision
FN
pred <- trans_predict(m, data)
TP <- data[(data$label=='Valid') & (pred=='Valid'), ]
TN <- data[(data$label=='Invalid') & (pred=='Invalid'), ]
FP <- data[(data$label=='Invalid') & (pred=='Valid'), ]
FN <- data[(data$label=='Valid') & (pred=='Invalid'), ]
Recall <- nrow(TP) / (nrow(TP)+nrow(FN))
Precision <- nrow(TP) / (nrow(TP)+nrow(FP))
F1 <- 2 * Recall * Precision / (Recall + Precision)
Recall
Precision
F1
FN
head(TP)
TP
head(data)
pred
head(pred)
TP <- data[(pred$label=='Valid') & (pred$pred=='Valid'), ]
TN <- data[(pred$label=='Invalid') & (pred$pred=='Invalid'), ]
FP <- data[(pred$label=='Invalid') & (pred$pred=='Valid'), ]
FN <- data[(pred$label=='Valid') & (pred$pred=='Invalid'), ]
Recall <- nrow(TP) / (nrow(TP)+nrow(FN))
Precision <- nrow(TP) / (nrow(TP)+nrow(FP))
F1 <- 2 * Recall * Precision / (Recall + Precision)
TP
TP <- pred[(pred$label=='Valid') & (pred$pred=='Valid'), ]
TN <- pred[(pred$label=='Invalid') & (pred$pred=='Invalid'), ]
FP <- pred[(pred$label=='Invalid') & (pred$pred=='Valid'), ]
FN <- pred[(pred$label=='Valid') & (pred$pred=='Invalid'), ]
TP
Recall
FN
m
data  <- read.csv('app_train1.csv', header=T)
data[is.na(data)]   <- 0
m <- PART(label ~ date_diff+date_var+amt+cat+discret+sub, data=data)
pred <- trans_predict(m, data)
TP <- pred[(pred$label=='Valid') & (pred$pred=='Valid'), ]
TN <- pred[(pred$label=='Invalid') & (pred$pred=='Invalid'), ]
FP <- pred[(pred$label=='Invalid') & (pred$pred=='Valid'), ]
FN <- pred[(pred$label=='Valid') & (pred$pred=='Invalid'), ]
Recall <- nrow(TP) / (nrow(TP)+nrow(FN))
Precision <- nrow(TP) / (nrow(TP)+nrow(FP))
F1 <- 2 * Recall * Precision / (Recall + Precision)
Recall
FN
Precision
FP
m
data  <- read.csv('app_train1.csv', header=T)
data[is.na(data)]   <- 0
m <- PART(label ~ date_diff+date_var+amt+cat+discret+sub, data=data)
pred <- trans_predict(m, data)
TP <- pred[(pred$label=='Valid') & (pred$pred=='Valid'), ]
TN <- pred[(pred$label=='Invalid') & (pred$pred=='Invalid'), ]
FP <- pred[(pred$label=='Invalid') & (pred$pred=='Valid'), ]
FN <- pred[(pred$label=='Valid') & (pred$pred=='Invalid'), ]
Recall <- nrow(TP) / (nrow(TP)+nrow(FN))
Precision <- nrow(TP) / (nrow(TP)+nrow(FP))
F1 <- 2 * Recall * Precision / (Recall + Precision)
Precision
Recall
FP
FN
F1
nrow(TP)
44/46
m
?seq
seq(0, 1, 10)
seq(0, 1, length.out=10)
seq(0, 1, length.out=11)
seq(.1, 1, length.out=11)
seq(.1, 1, length.out=10)
